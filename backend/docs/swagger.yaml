definitions:
  controllers.LoginRequest:
    properties:
      Email:
        example: joao@example.com
        type: string
      Password:
        example: "1234"
        type: string
    type: object
  controllers.RoleRequest:
    properties:
      description:
        description: Role description
        example: Administrator role with full access
        type: string
      roleName:
        description: Name of the role
        example: ADMIN
        type: string
    type: object
  controllers.SignUpRequest:
    properties:
      Email:
        example: joao@example.com
        type: string
      IsAdmin:
        example: false
        type: boolean
      Name:
        example: Jo√£o Vitor
        type: string
      Password:
        example: "12234"
        type: string
      Phone:
        example: "861412234"
        type: string
      RoleID:
        type: string
    type: object
  controllers.keysRequest:
    properties:
      Identification:
        example: "2680"
        type: string
      Quantity:
        example: 10
        type: integer
    type: object
info:
  contact: {}
  description: Locker management API in Go using Gin framework
  title: SGA API
  version: "1.0"
paths:
  /keys:
    get:
      description: Retrieve list of all keys (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
      security:
      - BearerAuth: []
      summary: Get all keys
      tags:
      - keys
    post:
      consumes:
      - application/json
      description: Create new key entries (admin only)
      parameters:
      - description: Key creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.keysRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - BearerAuth: []
      summary: Create new keys
      tags:
      - keys
  /keys/{id}:
    delete:
      description: Delete a key by ID (admin only)
      parameters:
      - description: Key ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content - successful deletion
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete a key
      tags:
      - keys
    patch:
      consumes:
      - application/json
      description: Update key information (admin only)
      parameters:
      - description: Key ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Key update data
        in: body
        name: request
        schema:
          $ref: '#/definitions/controllers.keysRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - BearerAuth: []
      summary: Update a key
      tags:
      - keys
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: User login
      tags:
      - auth
  /roles:
    get:
      description: Retrieve list of all roles (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role (admin only)
      parameters:
      - description: Role creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - roles
  /roles/{id}:
    delete:
      description: Delete a role by ID (admin only)
      parameters:
      - description: Role ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content - successful deletion
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete a role
      tags:
      - roles
    patch:
      consumes:
      - application/json
      description: Update role information (admin only)
      parameters:
      - description: Role ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Role update data
        in: body
        name: request
        schema:
          $ref: '#/definitions/controllers.RoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update a role
      tags:
      - roles
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided information
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Register a new user
      tags:
      - users
  /users:
    get:
      description: Retrieve list of all users (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by ID (admin only)
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content - successful deletion
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update user information (admin only)
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: request
        schema:
          $ref: '#/definitions/controllers.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
  /validate:
    get:
      description: Validate the current user's JWT token and return user data
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      security:
      - BearerAuth: []
      summary: Validate JWT token
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
